name: CI_job

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  PROD_HOSTNAME: ${{ secrets.PROD_HOSTNAME  }}
  PROD_USER_NAME: ${{ secrets.PROD_USER_NAME  }}
  PROD_PASSWORD: ${{ secrets.PROD_PASSWORD  }}
  PROD_DB_NAME: ${{ secrets.PROD_DB_NAME  }}
  PROD_SCHEMA: ${{ secrets.PROD_SCHEMA  }}
  CI_HOSTNAME: ${{ secrets.CI_HOSTNAME  }}
  CI_USER_NAME: ${{ secrets.CI_USER_NAME  }}
  CI_PASSWORD: ${{ secrets.CI_PASSWORD  }}
  CI_DB_NAME: ${{ secrets.CI_DB_NAME  }}
  CI_SCHEMA: ${{ secrets.CI_SCHEMA  }}
  PYTHON_VERSION: "3.9"
  DBT_DEFAULT_TARGET: ci

jobs:
  linting:
    name: Linting
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch main branch history
        run: git fetch origin main:refs/remotes/origin/main

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Install dbt dependencies
        run: dbt deps

      - name: Debug dbt connection
        run: dbt debug

      - name: Parse dbt project
        run: dbt parse

      - name: Run Pre-commit checks
        run: pre-commit run --from-ref origin/main --to-ref HEAD --all-files

        env:
          CI_HOSTNAME: ${{ secrets.CI_HOSTNAME  }}
          CI_USER_NAME: ${{ secrets.CI_USER_NAME  }}
          CI_PASSWORD: ${{ secrets.CI_PASSWORD  }}
          CI_DB_NAME: ${{ secrets.CI_DB_NAME  }}
          CI_SCHEMA: ${{ secrets.CI_SCHEMA  }}
          DBT_DEFAULT_TARGET: ci

  build:
    name: Build dbt Models
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    needs: linting

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set dynamic environment variables
        id: vars
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          CLEANED_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's;/;_;g' | sed 's/-/_/g')
          echo "CLEANED_BRANCH=${CLEANED_BRANCH_NAME}" >> $GITHUB_ENV
          SCHEMA_NAME="dbt_ci_${CLEANED_BRANCH_NAME}_${{ github.run_id }}"
          echo "CI_SCHEMA=${SCHEMA_NAME}" >> $GITHUB_ENV
          echo "Using schema name: $SCHEMA_NAME"

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Install dbt dependencies
        run: dbt deps

      - name: Debug dbt connection
        run: dbt debug

      - name: Parse dbt project
        run: dbt parse

      - name: Build dbt models
        run: |
          if [[ "${{ github.head_ref }}" == *"FULL-REFRESH"* ]]; then
            export FULL_REFRESH="--full-refresh"
            echo "Using full-refresh"
          else
            export FULL_REFRESH=""
            echo "Not using full-refresh"
          fi
          if [ -f "target-defer/manifest.json" ]; then
            echo "Manifest found, attempting state-based clone and build..."
            dbt clone -s state:modified+,config.materialized:incremental,state:old --exclude tag:pii --state target-defer
            dbt clone -s state:modified+,config.materialized:snapshot,state:old --exclude tag:pii --state target-defer
            dbt build -s state:modified state:modified+ --state target-defer --defer --fail-fast $FULL_REFRESH
          else
            echo "Manifest not found, running standard build..."
            dbt build --fail-fast $FULL_REFRESH
          fi

      - name: Drop CI Schema
        run: |
          echo "Attempting to drop schema: ${{ env.CI_SCHEMA }}"
          dbt run-operation drop_schemas_dev --args '{pattern: '"$CI_SCHEMA"'}'

        env:
          CI_HOSTNAME: ${{ secrets.CI_HOSTNAME  }}
          CI_USER_NAME: ${{ secrets.CI_USER_NAME  }}
          CI_PASSWORD: ${{ secrets.CI_PASSWORD  }}
          CI_DB_NAME: ${{ secrets.CI_DB_NAME  }}
          CI_SCHEMA: ${{ secrets.CI_SCHEMA  }}
          DBT_DEFAULT_TARGET: ci

  upload_manifest:
    name: Upload Manifest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history is available

      - name: Configure Git Authentication
        run: |
          git remote set-url origin "https://${{ secrets.CI_USER }}:${{ secrets.CI_PASSWORD }}@github.com/${{ github.repository }}.git"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions CI"
          git fetch --all
          git checkout main  # Change this if you need to use a different branch
          git pull origin main

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Install dbt dependencies
        run: dbt deps

      - name: Parse dbt project for Production
        run: dbt parse --target prod
        env:
          DBT_PROFILES_DIR: ./

      - name: Prepare Manifest File
        run: |
          mkdir -p target-defer
          if [ -f target/manifest.json ]; then
            mv target/manifest.json target-defer/manifest.json
            echo "Manifest prepared in target-defer/"
          else
            echo "manifest.json not found after dbt parse. Cannot proceed with upload."
            exit 1
          fi

      - name: Commit and Push Manifest
        run: |
          git add target-defer/manifest.json
          if git diff --staged --quiet; then
            echo "No changes to manifest.json to commit."
          else
            git commit -m "[skip ci] Upload manifest.json to branch main"
            git push origin main
          fi

        env:
          PROD_HOSTNAME: ${{ secrets.PROD_HOSTNAME  }}
          PROD_USER_NAME: ${{ secrets.PROD_USER_NAME  }}
          PROD_PASSWORD: ${{ secrets.PROD_PASSWORD  }}
          PROD_DB_NAME: ${{ secrets.PROD_DB_NAME  }}
          PROD_SCHEMA: ${{ secrets.PROD_SCHEMA  }}
